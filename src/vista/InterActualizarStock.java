package vista;

import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import conexion.Conexion;
import java.awt.Dimension;
import javax.swing.JOptionPane;
import modelo.Producto;

public class InterActualizarStock extends javax.swing.JInternalFrame {

    //Variables universales
    int idProducto = 0;
    int cantidad = 0;

    public InterActualizarStock() {
        initComponents();
        setTitle("Actualizar Stock");
        setSize(400, 300);
        this.CargarComboProductos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_CantidadActual = new javax.swing.JTextField();
        txt_CantidadNueva = new javax.swing.JTextField();
        jComboBox_Producto = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel_WallPaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Actualizar Stock");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Producto:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 100, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Stock Actual:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 100, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Stock Nuevo:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 100, -1));

        txt_CantidadActual.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_CantidadActual.setEnabled(false);
        getContentPane().add(txt_CantidadActual, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 90, 170, -1));

        txt_CantidadNueva.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getContentPane().add(txt_CantidadNueva, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, 170, -1));

        jComboBox_Producto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione producto:", "Item 2", "Item 3", "Item 4" }));
        jComboBox_Producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_ProductoActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox_Producto, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, 170, -1));

        jButton1.setBackground(new java.awt.Color(51, 255, 102));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("Actualizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 170, 170, 30));

        jLabel_WallPaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fondo3.jpg"))); // NOI18N
        getContentPane().add(jLabel_WallPaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 270));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox_ProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_ProductoActionPerformed
        this.MostrarStock();
    }//GEN-LAST:event_jComboBox_ProductoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Validar seleccion de producto
        if (!jComboBox_Producto.getSelectedItem().equals("Seleccione producto:")) {
            //Validar campos vacios
            if (!txt_CantidadNueva.getText().isEmpty()) {
                //Validar que sean numeros
                boolean validacion = ValidarCaracteres(txt_CantidadNueva.getText().trim());
                if (validacion == true) {
                    //Validar que la cantidad sea mayor que 0
                    if (Integer.parseInt(txt_CantidadNueva.getText()) > 0) {

                        Producto producto = new Producto();
                        controlador.Ctrl_Producto controlProducto = new controlador.Ctrl_Producto();
                        int stockActual = Integer.parseInt(txt_CantidadActual.getText().trim());
                        Double stockNuevo = Double.parseDouble(txt_CantidadNueva.getText().trim());

                        stockNuevo = stockActual + stockNuevo;
                        producto.setCantidad(stockNuevo);
                        if (controlProducto.actualizarStock(producto, idProducto)) {
                            JOptionPane.showMessageDialog(null, "Stock actualizado");
                            txt_CantidadNueva.setText("");
                            this.CargarComboProductos();
                        } else {
                            JOptionPane.showMessageDialog(null, "Error al actualizar stock");
                            jComboBox_Producto.setSelectedItem("Seleccione producto:");
                            txt_CantidadActual.setText("");
                            txt_CantidadNueva.setText("");
                            this.CargarComboProductos();
                            
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "La cantidad no puede ser cero o negativo");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "En la cantidad no se admiten caracteres no numericos");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Ingrese cantidad para sumar al stock del producto");

            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un producto");
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox_Producto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel_WallPaper;
    private javax.swing.JTextField txt_CantidadActual;
    private javax.swing.JTextField txt_CantidadNueva;
    // End of variables declaration//GEN-END:variables

    //Metodo para cargar productos
    private void CargarComboProductos() {
        Connection cn = (Connection) Conexion.conectar();
        String sql = "select * from producto";
        Statement st;
        try {
            st = (Statement) cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_Producto.removeAllItems();
            jComboBox_Producto.addItem("Seleccione producto:");
            while (rs.next()) {
                jComboBox_Producto.addItem(rs.getString("producto_nombre"));
            }
        } catch (SQLException e) {
            System.out.println("Error al cargar productos" + e);
        }
    }

    //Metodo para mostrar stock actual
    private void MostrarStock() {
        try {
            Connection cn = (Connection) Conexion.conectar();
            String sql = "select * from producto where producto_nombre ='" + this.jComboBox_Producto.getSelectedItem() + "'";
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            if (rs.next()) {
                idProducto = rs.getInt("producto_id");
                cantidad = rs.getInt("producto_cantidad");
                txt_CantidadActual.setText(String.valueOf(cantidad));
            } else {
                txt_CantidadActual.setText("");
            }

        } catch (SQLException e) {
            System.out.println("Error al cargar Stock Actual" + e);
        }
    }

    //Metodo de validacion de caracteres
    private boolean ValidarCaracteres(String valor) {
        int num;
        try {
            num = Integer.parseInt(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    
    // MÃ©todo para centrar la ventana interna en el escritorio
    private void centerFrame() {
        Dimension desktopSize = getParent().getSize();
        Dimension frameSize = getSize();
        int x = (desktopSize.width - frameSize.width) / 2;
        int y = (desktopSize.height - frameSize.height) / 2;
        setLocation(x, y);
    }

}
